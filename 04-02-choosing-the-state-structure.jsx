/*
Choosing the State Structure
see @link https://beta.reactjs.org/learn/choosing-the-state-structure
*/

/*
Principles for structuring state

- 1 관련있는 상태들은 그룹핑하기
  - 두 가지 이상의 상태를 항상 함께 업데이트하게 된다면, 걔네들을 하나로 합쳐서 관리할 방법을 고민해보자
- 2 서로 반대되는 상태를 만들지 말자
- 3 불필요한 상태를 만들지 말자
  - props나 기존의 상태들을 조합해서 알 수 있는 값이라면 굳이 상태로 만들지 말자. 괜히 버그만 만든다.
- 4 중복된 상태를 만들지 말자
  - 여러 상태에서 같은 정보를 동일하게 들고 있다면, 상태 간에 싱크를 맞추기가 어렵고 결국 버그가 생긴다. 가능하면 중복된 상태가 생기지 않도록 하자.
- 5 너무 겹겹이 쌓인 상태를 만들지 말자
  - 상태에 계층이 늘어날 수록 업데이트가 까다로워진다. 가능하면 플랫하게 유지하자.
- 이 모든 원칙의 목표: 실수 없이 상태를 쉽게 업데이트할 수 있게 할 것
*/

/*
1 Group related state

- 항상 함께 업데이트되어야 하는 상태라면 하나로 묶는 것을 고려해본다.
  - ex) 좌표의 x, y 값
- 상태에 어떤 게 들어올 지 정확히 알 수 없는 상태라면 객체나 배열로 묶어두는 것을 고려해본다.
  - ex) 사용자 입력 폼의 필드들
*/

// 상태를 하나의 변수로만 관리해야 할지, 여러 개로 관리해야 할지 고민될 수 있다.
// 아래와 같은 경우, 문제가 있는 건 아니다.
const [x, setX] = useState(0);
const [y, setY] = useState(0);

// 하지만 항상 함께 변경되어야 한다면, 하나의 변수로 합치는 게 싱크를 맞추는 걸 깜빡해서 버그를 만드는 일을 방지할 수 있다.
const [position, setPosition] = useState({
  x: 0,
  y: 0
});
